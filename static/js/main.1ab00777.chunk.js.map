{"version":3,"sources":["components/Button.js","components/Input.js","components/ClearButton.js","App.js","reportWebVitals.js","index.js"],"names":["Button","isOperator","val","isNaN","className","this","props","children","onClick","handleClick","Component","Input","ClearButton","handleClear","App","addToInput","setState","input","state","addDecimal","indexOf","addZeroToInput","clearInput","add","previousNumber","operator","subtract","multiply","divide","evaluate","currentNumber","parseInt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ab00777.chunk.js","sourcesContent":["/*import React, { Component } from \"react\";\r\nimport \"./Button.css\";\r\n\r\nclass Button extends Component {\r\n  isOperator = val => {\r\n    return !isNaN(val) || val === \".\" || val === \"=\";\r\n  };\r\n\r\n  render() {\r\n    return( \r\n      <div \r\n        className={`button ${this.isOperator(this.props.children) ? \"\" : \"operator\"}`}\r\n        onClick={() => this.props.handleClick(this.props.children)}\r\n      >\r\n        {this.props.children}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Button;\r\n*/\r\nimport React, { Component } from \"react\";\r\nimport \"./Button.css\";\r\n\r\nclass Button extends Component {\r\n  isOperator = val => {\r\n    return !isNaN(val) || val === \".\" || val === \"=\";\r\n  };\r\n\r\n  render() {\r\n    return( \r\n      <div \r\n        className={`button ${this.isOperator(this.props.children) ? \"\" : \"operator\"}`}\r\n        onClick={() => this.props.handleClick(this.props.children)}\r\n      >\r\n        {this.props.children}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Button;","import React, { Component } from \"react\";\r\nimport \"./Input.css\";\r\n\r\nclass Input extends Component {\r\n  render() {\r\n    return( \r\n      <div className=\"input\">\r\n        \r\n        {this.props.children}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Input;","import React, { Component } from \"react\";\r\nimport \"./ClearButton.css\";\r\n\r\nclass ClearButton extends Component {\r\n  render() {\r\n    return( \r\n      <div \r\n        className=\"clear-btn\"\r\n        onClick={() => this.props.handleClear()}>\r\n        {this.props.children}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ClearButton;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Button from \"./components/Button\";\nimport Input from \"./components/Input\";\nimport ClearButton from \"./components/ClearButton\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      input: \"\",\n      previousNumber: \"\",\n      currentNumber: \"\",\n      operator: \"\"\n    };\n  }\n\n  addToInput = val => {\n    this.setState({ input: this.state.input + val });\n  };\n\n  addDecimal = val => {\n    // only add decimal if there is no current decimal point present in the input area\n    if (this.state.input.indexOf(\".\") === -1) {\n      this.setState({ input: this.state.input + val });\n    }\n  };\n\n  addZeroToInput = val => {\n    // if this.state.input is not empty then add zero\n    if (this.state.input !== \"\") {\n      this.setState({ input: this.state.input + val });\n    }\n  };\n\n  clearInput = () => {\n    this.setState({ input: \"\" });\n  };\n\n  add = () => {\n    this.state.previousNumber = this.state.input;\n    this.setState({ input: \"\" });\n    this.state.operator = \"plus\";\n  };\n\n  subtract = () => {\n    this.state.previousNumber = this.state.input;\n    this.setState({ input: \"\" });\n    this.state.operator = \"subtract\";\n  };\n  \n  multiply = () => {\n    this.state.previousNumber = this.state.input;\n    this.setState({ input: \"\" });\n    this.state.operator = \"multiply\";\n  };\n\n  divide = () => {\n    this.state.previousNumber = this.state.input;\n    this.setState({ input: \"\" });\n    this.state.operator = \"divide\";\n  };\n\n  evaluate = () => {\n    this.state.currentNumber = this.state.input;\n\n    if (this.state.operator == \"plus\") {\n      this.setState({\n        input:\n          parseInt(this.state.previousNumber) +\n          parseInt(this.state.currentNumber)\n      });\n    } else if (this.state.operator == \"subtract\") {\n      this.setState({\n        input:\n          parseInt(this.state.previousNumber) -\n          parseInt(this.state.currentNumber)\n      });\n    } else if (this.state.operator == \"multiply\") {\n      this.setState({\n        input:\n          parseInt(this.state.previousNumber) *\n          parseInt(this.state.currentNumber)\n      });\n    } else if (this.state.operator == \"divide\") {\n      this.setState({\n        input:\n          parseInt(this.state.previousNumber) /\n          parseInt(this.state.currentNumber)\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"calc-wrapper\">\n          <div className=\"row\">\n            <Input>{this.state.input}</Input>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>7</Button>\n            <Button handleClick={this.addToInput}>8</Button>\n            <Button handleClick={this.addToInput}>9</Button>\n            <Button handleClick={this.divide}>/</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>4</Button>\n            <Button handleClick={this.addToInput}>5</Button>\n            <Button handleClick={this.addToInput}>6</Button>\n            <Button handleClick={this.multiply}>*</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>1</Button>\n            <Button handleClick={this.addToInput}>2</Button>\n            <Button handleClick={this.addToInput}>3</Button>\n            <Button handleClick={this.add}>+</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addDecimal}>.</Button>\n            <Button handleClick={this.addZeroToInput}>0</Button>\n            <Button handleClick={this.evaluate}>=</Button>\n            <Button handleClick={this.subtract}>-</Button>\n          </div>\n          <div className=\"row\">\n            <ClearButton handleClear={this.clearInput}>Clear</ClearButton>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}